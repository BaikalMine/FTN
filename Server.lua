local port = 99
local stations = {requesters = {}, providers = {}, depos = {}}
local trains = {}
local trainDepo = {}
local isBusy = {}
local task = {}
local clients = {}
local stationAssignments = {}

local trainEmptyCache = {}
local proxyCache = {}

local net = computer.getPCIDevices(classes.NetworkCard)[1]
if not net then error("No network card found") end

computer.promote()

net:open(port)
event.listen(net)

-- üì¶ –£—Ç–∏–ª–∏—Ç—ã: –≤–µ–∫—Ç–æ—Ä –∏ —Ü–≤–µ—Ç
Vector2d = {}
function Vector2d.new(x, y)
	return { x = math.floor(x), y = math.floor(y) }
end

Color = {
	WHITE = { r = 1.0, g = 1.0, b = 1.0, a = 1.0 },
	GREY  = { r = 0.75, g = 0.75, b = 0.75, a = 1.0 },
	BLACK = { r = 0.0, g = 0.0, b = 0.0, a = 1.0 },
	GREEN = { r = 0.0, g = 1.0, b = 0.0, a = 1.0 },
	RED   = { r = 1.0, g = 0.0, b = 0.0, a = 1.0 },
}

-- üñ•Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPU –∏ —ç–∫—Ä–∞–Ω–∞
local gpu = computer.getPCIDevices(classes.GPU_T2_C)[1]
if not gpu then computer.panic("‚ùå GPU –Ω–µ –Ω–∞–π–¥–µ–Ω") end

local screens = component.findComponent(classes.Screen)
if #screens == 0 then computer.panic("‚ùå –≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω") end

local screen = component.proxy(screens[1])
gpu:bindScreen(screen)
local screenSize = gpu:getScreenSize()

-- üßæ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–æ–≤
local logLines = {}
local maxLogLines = 25

function getTimestamp()
	local ms = computer.millis()
	local sec = math.floor(ms / 1000)
	local h = math.floor(sec / 3600) % 24
	local m = math.floor(sec / 60) % 60
	local s = sec % 60
	return string.format("%02d:%02d:%02d", h, m, s)
end

function redrawLogs()
	gpu:drawRect(Vector2d.new(0, 0), screenSize, Color.BLACK, nil, 0)
	for i, line in ipairs(logLines) do
		gpu:drawText(Vector2d.new(10, (i - 1) * 30), line, 20, Color.WHITE, false)
	end
	gpu:flush()
end

function log(msg, color)
	color = color or Color.WHITE
	local timestamp = getTimestamp()
	local line = timestamp .. " | " .. msg
	table.insert(logLines, line)
	if #logLines > maxLogLines then table.remove(logLines, 1) end
	redrawLogs()
end

log("[INIT] üöÜ FTN Server –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É: " .. port)

-- üîÅ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
function getStationByID(id)
	if proxyCache[id] then return proxyCache[id] end
	local ok, obj = pcall(component.proxy, id)
	if ok and obj and obj.getHash then
		proxyCache[id] = obj
		return obj
	end
	return nil
end

-- üîÅ –û—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function clearTimeTable(train)
	local tt = train:getTimeTable()
	while tt.numStops > 0 do
		tt:removeStop(0)
	end
	tt:setCurrentStop(0)
end

-- üì¶ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –ø–æ–µ–∑–¥
function trainIsEmpty(train)
	if trainEmptyCache[train.hash] ~= nil then
		return trainEmptyCache[train.hash]
	end
	for _, vehicle in pairs(train:getVehicles()) do
		local inv = vehicle:getInventories()[1]
		if inv and inv.itemCount > 0 then
			trainEmptyCache[train.hash] = false
			return false
		end
	end
	trainEmptyCache[train.hash] = true
	return true
end

-- üßπ –û—á–∏—Å—Ç–∫–∞ trainEmptyCache
function resetTrainEmptyCache()
	for k in pairs(trainEmptyCache) do
		trainEmptyCache[k] = nil
	end
end

-- üõ§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
function addStop(train, station, index, definition, duration, isRule)
	if not station or type(station) ~= "userdata" or not station.getHash then
		log("[ERROR] ‚ùå addStop –ø–æ–ª—É—á–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π station! –¢–∏–ø: " .. tostring(type(station)))
		return
	end
	train:getTimeTable():addStop(index, station, {
		definition = definition,
		duration = duration,
		isDurationAndRule = isRule
	})
end

-- üìè –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
local function distSqr(a, b)
	local dx = a.x - b.x
	local dy = a.y - b.y
	local dz = a.z - b.z
	return dx*dx + dy*dy + dz*dz
end

-- üõ†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
local lastUpdateTime = 0
local lastProcessTime = 0
local lastRestoreTime = 0
local lastArrivalTime = 0
local lastReleaseTime = 0

-- –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
local updateInterval = 30000
local processInterval = 5000
local restoreInterval = 60000
local arrivalInterval = 10000
local releaseInterval = 15000

function restoreActiveTrains(targetDepo)
	if not targetDepo then return end

	local name = targetDepo.name
	--log("[RESTORE] üîÅ –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞ –¥–ª—è –¥–µ–ø–æ: " .. name)

	local platforms = component.findComponent(classes.TrainPlatform)
	if #platforms == 0 then
		--log("[RESTORE] ‚ùå –ù–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º")
		return
	end

	local graph = component.proxy(platforms[1]):getTrackGraph()
	local trainList = graph:getTrains()

	for _, train in pairs(trainList) do
		local hash = train.hash
		local trainName = train:getName()

		if trains[hash] or isBusy[hash] then
			--log("[RESTORE] ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω " .. trainName .. ": —É–∂–µ –∑–∞–Ω—è—Ç")
			goto continue
		end

		local tt = train:getTimeTable()
		if not tt or tt.numStops == 0 then
			--log("[RESTORE] ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω " .. trainName .. ": –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
			goto continue
		end

		for i = 0, tt.numStops - 1 do
			local stop = tt:getStop(i)
			if stop and stop.station and stop.station.name == name then
				trains[hash] = train
				trainDepo[hash] = targetDepo
				isBusy[hash] = true
				isBusy[targetDepo.id or targetDepo.hash] = train

				log("[RESTORE] ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–µ–∑–¥ " .. trainName .. " –¥–ª—è –¥–µ–ø–æ " .. name)
				return
			end
		end

		::continue::
	end

	log("[RESTORE] ‚ùì –ü–æ–µ–∑–¥ –¥–ª—è –¥–µ–ø–æ " .. name .. " –Ω–µ –Ω–∞–π–¥–µ–Ω")
end

function trainNearStation(train, station, maxDist)
	local maxDistSqr = (maxDist or 100)^2
	local pos = train:getFirst().location
	local sPos = station.location
	if pos and sPos then
		local dx = pos.x - sPos.x
		local dy = pos.y - sPos.y
		local dz = pos.z - sPos.z
		local distSqr = dx*dx + dy*dy + dz*dz
		return distSqr < maxDistSqr
	end
	return false
end

function processTasks()
	-- üì¶ –°–±–æ—Ä –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤, —Ä–µ–∞–ª—å–Ω–æ —Å—Ç–æ—è—â–∏—Ö –≤ –¥–µ–ø–æ
	local availableTrains = {}
	for hash, train in pairs(trains) do
		if not isBusy[hash] and trainIsEmpty(train) then
			local tt = train:getTimeTable()
			if tt and tt.numStops == 1 then
				local stop = tt:getStop(0)
				if stop and stop.station then
					local depoEntry = stations.depos[stop.station.id]
					local depo = (type(depoEntry) == "table" and depoEntry.station) or depoEntry
					if depo and trainNearStation(train, depo, 100) then
						table.insert(availableTrains, {
							hash = hash,
							train = train,
							depo = depo,
							pos = stop.station.location
						})
					end
				end
			end
		end
	end

	-- üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
	for i = #task, 1, -1 do
		local t = task[i]
		if t.assignedTrain then goto continue end

		local sid = t.station.id
		local stEntry = stations.requesters[sid]
		if not stEntry or not stEntry.freeAmount then
			log("[SKIP] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–Ω—Ü–∏–∏ " .. t.station.name .. ", –∑–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
			goto continue
		end

		-- üî¢ –°–∫–æ–ª—å–∫–æ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ–µ–∑–¥–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏
		local active = 0
		if stationAssignments[sid] then
			for _ in pairs(stationAssignments[sid]) do
				active = active + 1
			end
		end

		local maxTasks = (t.priority == 2 and 3) or (t.priority == 1 and 2) or 1
		if active >= maxTasks then
			if not t.waitLogged then
				log("[WAIT] –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–µ–∑–¥–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ " .. t.station.name)
				t.waitLogged = true
			end
			goto continue
		end

		-- üöÇ –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–µ–∑–¥–∞
		local bestTrainIndex, bestTrain, bestDepo, bestDist
		for idx, entry in ipairs(availableTrains) do
			local d = distSqr(t.station.location, entry.pos)
			if not bestDist or d < bestDist then
				bestTrainIndex = idx
				bestTrain = entry.train
				bestDepo = entry.depo
				bestDist = d
			end
		end

		-- üè≠ –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ—Å—É—Ä—Å–∞
		local provider = nil
		local maxAmount = -1
		local providers = groupedProviders[t.resource:lower()] or {}
		for _, entry in ipairs(providers) do
			if entry and entry.station and entry.station.id ~= sid then
				local amount = entry.available or 0
				local enoughRes = (t.resType == "fluid" and amount >= 6400)
				              or (t.resType == "item" and amount >= 128)
				local ignoreLimit = t.priority > 0
				if (ignoreLimit or enoughRes) and amount > maxAmount then
					provider = entry.station
					maxAmount = amount
				end
			end
		end

		-- ‚úÖ –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–µ–∑–¥
		if bestTrain and bestDepo and provider then
			table.remove(availableTrains, bestTrainIndex)

			clearTimeTable(bestTrain)
			local idx = 0
			addStop(bestTrain, provider, idx, 0, 15, false)
			idx = idx + 1
			addStop(bestTrain, t.station, idx, 1, 15, true)
			idx = idx + 1
			addStop(bestTrain, bestDepo, idx, 0, 15, false)

			isBusy[bestTrain.hash] = t.station
			isBusy[bestDepo.id] = bestTrain

			stationAssignments[sid] = stationAssignments[sid] or {}
			stationAssignments[sid][bestTrain.hash] = true

			trainDepo[bestTrain.hash] = bestDepo
			bestTrain:getTimeTable():setCurrentStop(0)

			t.assignedTrain = bestTrain.hash
			t.recentlyCreated = nil
			t.waitLogged = nil

			local tag = (t.priority == 2 and "[CRITICAL] ") or (t.priority == 1 and "[HIGH] ") or ""
			log("[TASK] " .. tag .. "–ù–∞–∑–Ω–∞—á–µ–Ω –ø–æ–µ–∑–¥ " .. bestTrain:getName() ..
				": " .. provider.name .. " ‚Üí " .. t.station.name .. " ‚Üí " .. bestDepo.name)
			--log("[DEBUG] –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: " .. t.station.name .. ", assignedTrain: " .. tostring(t.assignedTrain))
			net:send(t.clientAddress, port, "assignTrain", bestTrain:getName())
		else
			if not t.waitLogged then
				local reasons = {}
				if not bestTrain then table.insert(reasons, "–ø–æ–µ–∑–¥") end
				if not provider then table.insert(reasons, "–ø–æ—Å—Ç–∞–≤—â–∏–∫") end
				if not bestDepo then table.insert(reasons, "–¥–µ–ø–æ") end
				log("[WAIT] –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–µ–∑–¥ –¥–ª—è –∑–∞–¥–∞—á–∏ –Ω–∞ " .. t.station.name ..
					" ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: " .. table.concat(reasons, ", "))
				t.waitLogged = true
			end
		end

		::continue::
	end
end

function trackArrivals()
	for _, train in pairs(trains) do
		if train and train.hash and train.getTimeTable then
			local hash = train.hash
			if isBusy[hash] then
				local tt = train:getTimeTable()
				if tt and tt.getCurrentStop and tt.getStop then
					local index = tt:getCurrentStop()
					if index >= 0 and index < tt.numStops then
						local stop = tt:getStop(index)
						if stop and stop.station and not isBusy[stop.station.id] then
							log("[ARRIVAL] –ü–æ–µ–∑–¥ " .. train:getName() .. " –ø—Ä–∏–±—ã–ª –Ω–∞ " .. stop.station.name)
							isBusy[stop.station.id] = train
						end
					end
				end
			end
		end
	end
end

function releaseTrains()
	for _, train in pairs(trains) do
		if not isBusy[train.hash] then goto continue end

		local tt = train:getTimeTable()
		if not tt then
			log("[WARN] –ü–æ–µ–∑–¥ " .. train:getName() .. " –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
			goto continue
		end

		local index = tt:getCurrentStop()

		-- üö¶ –ü–æ–µ–∑–¥ —É–µ–∑–∂–∞–µ—Ç —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ ‚Üí —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é
		if index > 0 and tt.numStops > 1 then
			local prevStop = tt:getStop(0)
			if prevStop and prevStop.station then
				local sid = prevStop.station.id or prevStop.station.hash
				log("[MOVE] –ü–æ–µ–∑–¥ " .. train:getName() .. " –ø–æ–∫–∏–¥–∞–µ—Ç —Å—Ç–∞–Ω—Ü–∏—é " .. prevStop.station.name)
				tt:removeStop(0)
				tt:setCurrentStop(index - 1)
				isBusy[sid] = nil
			end

		-- üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –¥–µ–ø–æ
		elseif tt.numStops == 1 then
			local stop = tt:getStop(0)
			if stop and stop.station then
				local sid = stop.station.id or stop.station.hash
				local isDepo = stations.depos[sid] ~= nil

				if isDepo and trainNearStation(train, stop.station, 100) then
					log("[COMPLETE] –ü–æ–µ–∑–¥ " .. train:getName() .. " –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É –∏ –ø—Ä–∏–±—ã–ª –≤ –¥–µ–ø–æ")

					-- üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
					isBusy[train.hash] = nil
					isBusy[sid] = nil

					-- üö´ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ stationAssignments
					if stationAssignments[sid] then
						stationAssignments[sid][train.hash] = nil
						if next(stationAssignments[sid]) == nil then
							stationAssignments[sid] = nil
						end
					end

					-- üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
					for i = #task, 1, -1 do
						local t = task[i]
						if t.assignedTrain == train.hash then
							log("[TASK FINALIZE] –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø–æ–µ–∑–¥–æ–º " .. train:getName())
							table.remove(task, i)
						end
					end
				end
			end
		end

		-- üîÑ –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —É–¥–∞–ª—è–µ–º –ø–æ–µ–∑–¥ –∏–∑ –≤—Å–µ—Ö stationAssignments
		for sid, trainsSet in pairs(stationAssignments) do
			if trainsSet[train.hash] then
				trainsSet[train.hash] = nil
				log("[CLEANUP] –£–¥–∞–ª—ë–Ω –ø–æ–µ–∑–¥ " .. train:getName() .. " –∏–∑ stationAssignments —Å—Ç–∞–Ω—Ü–∏–∏ " .. sid)
				if next(trainsSet) == nil then
					stationAssignments[sid] = nil
				end
			end
		end

		::continue::
	end
end

local function rebuildGroupedProviders()
	groupedProviders = {}
	for id, entry in pairs(stations.providers) do
		if entry and entry.resource then
			local res = entry.resource:lower()
			groupedProviders[res] = groupedProviders[res] or {}
			table.insert(groupedProviders[res], entry)
		end
	end
end

function handleRegister(from, payload)
	local role, id, name, x, y, z, amount, priority, resource =
		payload:match("([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)")
	if not id or id == "" then return end

	priority = tonumber(priority) or 0
	resource = tostring(resource or "-"):lower()

	local alreadyRegistered = clients[from] and clients[from].id == id and clients[from].role == role
	if alreadyRegistered then return end

	if clients[from] and not alreadyRegistered then
		log("[RE-REGISTER] üîÑ –ö–ª–∏–µ–Ω—Ç " .. tostring(from) .. " —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –¥—Ä—É–≥–æ–π. –ó–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		net:send(from, port, "requestRegister", "")
		return
	end

	local proxyStation = getStationByID(id)
	if not proxyStation then
		log("[ERROR] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å station –ø–æ ID: " .. id)
		net:send(from, port, "requestRegister", "")
		return
	end

	local entry = {
		id = id,
		name = name,
		location = {x = tonumber(x), y = tonumber(y), z = tonumber(z)},
		station = proxyStation,
		resource = resource,
		priority = priority,
		type = "item",
		available = 0,
		freeAmount = 0
	}

	if role == "provider" then
		stations.providers[id] = entry
		rebuildGroupedProviders()
	elseif role == "requester" then
		stations.requesters[id] = entry
	elseif role == "depo" then
		stations.depos[id] = proxyStation
		restoreActiveTrains(proxyStation)
	else
		log("[WARN] ‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: " .. role)
		return
	end

	if not clients[from] then
		log("[REGISTER] " .. role .. ": " .. name .. " (" .. id .. ")")
	end

	clients[from] = {
		registered = true,
		id = id,
		role = role
	}
	net:send(from, port, "registerOK", "")
end

function handleStatusUpdate(from, payload)
	local id, role, resource, amount, resType =
		payload:match("updateStatus|([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)")

	amount = tonumber(amount) or 0
	resource = tostring(resource or "-"):lower()
	resType = tostring(resType or "item")

	local entry = nil
	if role == "requester" then
		entry = stations.requesters[id]
	elseif role == "provider" then
		entry = stations.providers[id]
	elseif role == "depo" then
		return
	end

	if not entry then
		log("[WARN] ‚ùì –°—Ç–∞—Ç—É—Å –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏: " .. tostring(id))
		net:send(from, port, "requestRegister", "")
		return
	end

	-- üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
	if role == "requester" then
		entry.freeAmount = amount
	elseif role == "provider" then
		entry.available = amount
	end

	entry.resource = resource
	entry.type = resType

	-- üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ –≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
	for _, t in ipairs(task) do
		if t.station.id == id then
			t.resType = resType
			break
		end
	end

	-- üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è requester
	if role == "requester" then
		local trainCapacity = (resType == "fluid" and 6400) or 128
		local priority = entry.priority or 0

		-- üîÅ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Å–Ω–∏–∂–∞–µ—Ç –ª–∞–≥–∏)
		if entry.lastAmount == amount and entry.lastResType == resType then return end
		entry.lastAmount = amount
		entry.lastResType = resType

		-- üìä –°—á–∏—Ç–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏
local assignedTasks = 0
for _, t in ipairs(task) do
	if t.station.id == id then
		assignedTasks = assignedTasks + 1
	end
end

local maxTasks = (priority == 2 and 3) or (priority == 1 and 2) or 1
local neededTasks = 0

log(("[STATUS] %s (%s): %s %s, —Å–≤–æ–±–æ–¥–Ω–æ: %.2f, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %d, —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: %d"):format(
	entry.station.name, role, amount, resType, entry.freeAmount or 0, priority, assignedTasks
))

if priority > 0 then
	local fullTrains = math.floor(amount / trainCapacity)
	if fullTrains == 0 then
		neededTasks = 1
	else
		neededTasks = maxTasks
	end
else
	if amount >= trainCapacity then
		neededTasks = 1
	end
end

local toCreate = neededTasks - assignedTasks

if toCreate > 0 then
	log(("[TASK CREATE] –°—Ç–∞–Ω—Ü–∏—è %s: —Å–æ–∑–¥–∞–Ω–æ %d –∑–∞–¥–∞—á (–Ω—É–∂–Ω–æ %d, —É–∂–µ %d)"):format(
		entry.station.name, toCreate, neededTasks, assignedTasks
	))
	for i = 1, toCreate do
		table.insert(task, {
			station = entry.station,
			clientAddress = from,
			priority = priority,
			resource = resource,
			resType = resType
		})
	end
end
	end
end

function updateTrainNetwork()
	local platforms = component.findComponent(classes.TrainPlatform)
	if #platforms == 0 then return end
	local graph = component.proxy(platforms[1]):getTrackGraph()
	local trainList = graph:getTrains()
	for _, train in pairs(trainList) do
		if not trains[train.hash] and trainIsEmpty(train) then
			trains[train.hash] = train
		end
	end
end

-- üîÅ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
local updateTimer = 0
local restoredTrains = false

while true do
	event.pull(0.2)

	local now = computer.millis()

	local e, _, from, recvPort, cmd, payload = event.pull(0.5)
	if e == "NetworkMessage" and recvPort == port then
		if cmd == "register" then handleRegister(from, payload) end
		if cmd == "status" then handleStatusUpdate(from, payload) end
	end

	if now - lastUpdateTime >= updateInterval then
		updateTrainNetwork()
		lastUpdateTime = now
	end

	if now - lastProcessTime >= processInterval then
		processTasks()
		lastProcessTime = now
	end
	
	--if now - lastRestoreTime >= restoreInterval then
	--			if not restoredTrains then
	--					restoreActiveTrains()
	--				restoredTrains = true
	--	end

	--	lastRestoreTime = now
	--end

	if now - lastArrivalTime >= arrivalInterval then
		trackArrivals()
		lastArrivalTime = now
	end

	if now - lastReleaseTime >= releaseInterval then
		releaseTrains()
		resetTrainEmptyCache()
		lastReleaseTime = now
	end
end
